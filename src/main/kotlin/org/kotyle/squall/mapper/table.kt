package org.kotyle.squall.mapper.table

import org.kotyle.squall.base.SquallException
import org.kotyle.squall.db.column.BigInt
import org.kotyle.squall.db.column.Column
import org.kotyle.squall.db.column.GenerationStrategy
import org.kotyle.squall.db.column.VarChar
import org.kotyle.squall.mapper.scanner.Introspector
import org.slf4j.LoggerFactory

val log = LoggerFactory.getLogger("org.kotyle.squall.mapper.table")

interface View {
    abstract val preparedSelect: String
    abstract fun commaSeparatedColumnList(): String
    abstract fun from(): String
    abstract fun select()
}

class TableView(val table: Table): View {
    override val preparedSelect: String by lazy{ "select ${commaSeparatedColumnList()} from ${from()}" }
    override fun commaSeparatedColumnList(): String = table._columns.map{it.name}.joinToString(",")
    override fun from(): String = table._name
    override fun select() {}
}

open class Table(val _name: String, val _columns: MutableList<Column>) {
    companion object {
        val map: MutableMap<String,Table> = mutableMapOf()
        fun examine(klass: Class<*>) {
            val table = Introspector.examine(klass)?.let { annPair ->
                Table(annPair.first.tableName, mutableListOf()).apply {
                    annPair.second.forEach {
                        val col = Column(this,it.second.name, it.second.type,false,it.second.autoGenerated)
                        this._columns.add(col)
                    }
                }
            }
        }
        fun get(name: String) = map.get(name) ?:
                throw SquallException("err-table-not-found", mapOf("name" to name))
    }
    constructor (name: String): this(name, mutableListOf())
    init {
        map.put(_name,this)
    }
    val v = TableView(this)

    fun varchar(name: String, maxLen: Int) = VarChar(this, name, maxLen)
    fun bigint(name: String, autoGenerated: GenerationStrategy = GenerationStrategy.NONE) = BigInt(this, name, autoGenerated = autoGenerated)
}
